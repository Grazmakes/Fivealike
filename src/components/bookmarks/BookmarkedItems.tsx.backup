'use client';

import { useState } from 'react';
import { Bookmark, Search, ExternalLink, X, Calendar, ThumbsUp, ThumbsDown, Archive, CheckCircle, TrendingUp } from 'lucide-react';
import { BookmarkedItem } from '@/types';

interface BookmarkedItemsProps {
  bookmarkedItems: BookmarkedItem[];
  onRemoveBookmark: (listId: number, itemIndex: number) => void;
  onTitleClick?: (title: string) => void;
  onAuthorClick?: (author: string) => void;
  onItemClick?: (itemName: string) => void;
  onTryItem?: (listId: number, itemIndex: number, rating: 'up' | 'down') => void;
  onArchiveItem?: (listId: number, itemIndex: number) => void;
}

export default function BookmarkedItems({
  bookmarkedItems,
  onRemoveBookmark,
  onTitleClick,
  onAuthorClick,
  onItemClick,
  onTryItem,
  onArchiveItem
}: BookmarkedItemsProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [viewMode, setViewMode] = useState<'items' | 'lists'>('items');

  const filteredBookmarks = bookmarkedItems.filter(bookmark => {
    const matchesSearch = !searchQuery ||
      bookmark.itemName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      bookmark.listTitle.toLowerCase().includes(searchQuery.toLowerCase()) ||
      bookmark.listAuthor.toLowerCase().includes(searchQuery.toLowerCase());

    const matchesCategory = !selectedCategory || bookmark.listCategory === selectedCategory;

    return matchesSearch && matchesCategory;
  });

  const categories = Array.from(new Set(bookmarkedItems.map(item => item.listCategory)));

  // Group bookmarks by list for progress tracking
  const bookmarksByList = bookmarkedItems.reduce((acc, bookmark) => {
    const key = `${bookmark.listId}-${bookmark.listTitle}`;
    if (!acc[key]) {
      acc[key] = {
        listId: bookmark.listId,
        listTitle: bookmark.listTitle,
        listAuthor: bookmark.listAuthor,
        listCategory: bookmark.listCategory,
        items: [],
        totalItems: 5, // Assuming 5 items per list
        bookmarkedCount: 0,
        triedCount: 0
      };
    }
    acc[key].items.push(bookmark);
    acc[key].bookmarkedCount++;
    // TODO: Add triedCount when we have that data
    return acc;
  }, {} as any);

  const listsWithProgress = Object.values(bookmarksByList);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2 flex items-center">
          <Bookmark className="mr-3 text-yellow-500" size={28} />
          Bookmarked Items
        </h1>
        <p className="text-gray-600 dark:text-gray-400">
          Your saved items from various lists
        </p>
      </div>

      {/* Search and Filter */}
      <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-4">
        <div className="flex flex-col sm:flex-row gap-4">
          {/* Search */}
          <div className="relative flex-1">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="Search bookmarked items..."
              className="w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            />
          </div>

          {/* Category Filter */}
          <div className="sm:w-48">
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="mt-3 flex items-center justify-between">
          <div className="text-sm text-gray-600 dark:text-gray-400">
            {viewMode === 'items' ? (
              `${filteredBookmarks.length} of ${bookmarkedItems.length} bookmarked items`
            ) : (
              `${listsWithProgress.length} lists with bookmarks`
            )}
          </div>

          {/* View Toggle */}
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setViewMode('items')}
              className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                viewMode === 'items'
                  ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-300'
                  : 'text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-300'
              }`}
            >
              Items
            </button>
            <button
              onClick={() => setViewMode('lists')}
              className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                viewMode === 'lists'
                  ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-300'
                  : 'text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-300'
              }`}
            >
              Progress
            </button>
          </div>
        </div>
      </div>

      {/* Bookmarked Items */}
      <div className="space-y-4">
        {viewMode === 'lists' ? (
          /* Progress View */
          listsWithProgress.length > 0 ? (
            listsWithProgress.map((list: any) => {
              const progress = Math.round((list.bookmarkedCount / list.totalItems) * 100);
              const isNearCompletion = list.bookmarkedCount >= 4;

              return (
                <div
                  key={`${list.listId}-${list.listTitle}`}
                  className={`bg-white dark:bg-gray-800 rounded-xl border p-6 hover:shadow-md transition-all duration-200 ${
                    isNearCompletion
                      ? 'border-yellow-300 dark:border-yellow-600 bg-yellow-50 dark:bg-yellow-900/10'
                      : 'border-gray-200 dark:border-gray-700'
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                          <button
                            onClick={() => onTitleClick?.(list.listTitle)}
                            className="text-left hover:text-blue-600 dark:hover:text-blue-400 transition-colors cursor-pointer"
                          >
                            {list.listTitle}
                          </button>
                        </h3>
                        {isNearCompletion && (
                          <div className="flex items-center text-sm text-yellow-700 dark:text-yellow-300 bg-yellow-100 dark:bg-yellow-900/30 px-2 py-1 rounded-full">
                            <TrendingUp size={14} className="mr-1" />
                            Almost there!
                          </div>
                        )}
                      </div>

                      <div className="space-y-3">
                        <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                          <span>By:</span>
                          <button
                            onClick={() => onAuthorClick?.(list.listAuthor)}
                            className="ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium"
                          >
                            {list.listAuthor}
                          </button>
                        </div>

                        <div className="flex items-center justify-between">
                          <span className="inline-block px-2 py-1 bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 rounded-full text-xs font-medium">
                            {list.listCategory}
                          </span>
                        </div>

                        {/* Progress Bar */}
                        <div className="space-y-2">
                          <div className="flex items-center justify-between text-sm">
                            <span className="text-gray-600 dark:text-gray-400">
                              Progress: {list.bookmarkedCount} of {list.totalItems} items saved
                            </span>
                            <span className="font-medium text-gray-900 dark:text-white">
                              {progress}%
                            </span>
                          </div>
                          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                            <div
                              className={`h-2 rounded-full transition-all duration-300 ${
                                isNearCompletion ? 'bg-yellow-500' : 'bg-blue-500'
                              }`}
                              style={{ width: `${progress}%` }}
                            />
                          </div>
                        </div>

                        {/* Progress Indicators */}
                        <div className="flex items-center space-x-1 mt-3">
                          {Array.from({ length: list.totalItems }).map((_, index) => (
                            <div
                              key={index}
                              className={`w-3 h-3 rounded-full ${
                                index < list.bookmarkedCount
                                  ? isNearCompletion ? 'bg-yellow-400' : 'bg-blue-400'
                                  : 'bg-gray-300 dark:bg-gray-600'
                              }`}
                            />
                          ))}
                        </div>

                        {isNearCompletion && (
                          <div className="mt-4 p-3 bg-yellow-100 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-700">
                            <div className="flex items-start">
                              <CheckCircle className="text-yellow-500 mt-0.5 mr-2 flex-shrink-0" size={16} />
                              <div className="text-sm">
                                <p className="font-medium text-yellow-800 dark:text-yellow-200 mb-1">
                                  You're almost done with this list!
                                </p>
                                <p className="text-yellow-700 dark:text-yellow-300">
                                  Complete all 5 items and give the creator a Gold High Five! 🖐️✨
                                </p>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              );
            })
          ) : (
            <div className="text-center py-12">
              <TrendingUp size={64} className="mx-auto text-gray-300 dark:text-gray-600 mb-4" />
              <h3 className="text-xl font-medium text-gray-900 dark:text-white mb-2">
                No progress to show yet
              </h3>
              <p className="text-gray-500 dark:text-gray-400 mb-4">
                Start bookmarking items from lists to track your progress!
              </p>
            </div>
          )
        ) : (
          /* Items View */
          filteredBookmarks.length > 0 ? (
          filteredBookmarks.map((bookmark) => (
            <div
              key={bookmark.id}
              className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 hover:shadow-md transition-all duration-200"
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  {/* Item Name */}
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2 flex items-center">
                    <Bookmark className="mr-2 text-yellow-500 fill-current" size={16} />
                    <button
                      onClick={() => onItemClick?.(bookmark.itemName)}
                      className="text-left hover:text-primary-600 dark:hover:text-primary-400 transition-colors cursor-pointer"
                    >
                      {bookmark.itemName}
                    </button>
                  </h3>

                  {/* List Info */}
                  <div className="space-y-2">
                    <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                      <span>From:</span>
                      <button
                        onClick={() => onTitleClick?.(bookmark.listTitle)}
                        className="ml-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium flex items-center"
                      >
                        {bookmark.listTitle}
                        <ExternalLink size={12} className="ml-1" />
                      </button>
                    </div>

                    <div className="flex items-center text-sm text-gray-600 dark:text-gray-400">
                      <span>By:</span>
                      <button
                        onClick={() => onAuthorClick?.(bookmark.listAuthor)}
                        className="ml-2 text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium"
                      >
                        {bookmark.listAuthor}
                      </button>
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <span className="inline-block px-2 py-1 bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 rounded-full text-xs font-medium">
                          {bookmark.listCategory}
                        </span>
                        <div className="flex items-center text-xs text-gray-500 dark:text-gray-400">
                          <Calendar size={12} className="mr-1" />
                          Bookmarked {formatDate(bookmark.bookmarkedAt)}
                        </div>
                      </div>

                      <button
                        onClick={() => onRemoveBookmark(bookmark.listId, bookmark.itemIndex)}
                        className="p-1 text-gray-400 hover:text-red-500 dark:text-gray-500 dark:hover:text-red-400 transition-colors"
                        title="Remove bookmark"
                      >
                        <X size={16} />
                      </button>
                    </div>

                    {/* Try It Section */}
                    <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <CheckCircle className="text-blue-500" size={16} />
                          <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                            Did you try it?
                          </span>
                        </div>

                        <div className="flex items-center space-x-2">
                          {onTryItem && (
                            <>
                              <button
                                onClick={() => onTryItem(bookmark.listId, bookmark.itemIndex, 'up')}
                                className="flex items-center space-x-1 px-3 py-1.5 bg-green-100 hover:bg-green-200 dark:bg-green-900/20 dark:hover:bg-green-900/40 text-green-700 dark:text-green-300 rounded-full text-sm font-medium transition-colors"
                                title="I tried it and liked it!"
                              >
                                <ThumbsUp size={14} />
                                <span>Loved it</span>
                              </button>

                              <button
                                onClick={() => onTryItem(bookmark.listId, bookmark.itemIndex, 'down')}
                                className="flex items-center space-x-1 px-3 py-1.5 bg-red-100 hover:bg-red-200 dark:bg-red-900/20 dark:hover:bg-red-900/40 text-red-700 dark:text-red-300 rounded-full text-sm font-medium transition-colors"
                                title="I tried it but didn't like it"
                              >
                                <ThumbsDown size={14} />
                                <span>Not for me</span>
                              </button>
                            </>
                          )}

                          {onArchiveItem && (
                            <button
                              onClick={() => onArchiveItem(bookmark.listId, bookmark.itemIndex)}
                              className="flex items-center space-x-1 px-3 py-1.5 bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-600 dark:text-gray-400 rounded-full text-sm font-medium transition-colors"
                              title="Archive this item"
                            >
                              <Archive size={14} />
                              <span>Archive</span>
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))
        ) : (
          <div className="text-center py-12">
            <Bookmark size={64} className="mx-auto text-gray-300 dark:text-gray-600 mb-4" />
            <h3 className="text-xl font-medium text-gray-900 dark:text-white mb-2">
              {bookmarkedItems.length === 0 ? 'No bookmarked items yet' : 'No items match your search'}
            </h3>
            <p className="text-gray-500 dark:text-gray-400 mb-4">
              {bookmarkedItems.length === 0
                ? 'Start bookmarking individual items from lists to see them here!'
                : 'Try adjusting your search terms or category filter.'
              }
            </p>
            {bookmarkedItems.length === 0 && (
              <div className="text-sm text-gray-500 dark:text-gray-400">
                💡 Look for the bookmark icon next to items in lists to save them here.
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}